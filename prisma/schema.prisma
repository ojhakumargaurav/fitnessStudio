
datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String         @id @default(cuid())
  name          String
  email         String         @unique
  password      String
  phoneNumber   String?
  role          String         @default("user") // Should always be 'user'
  status        String         // e.g., 'pending', 'active'
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  isActive      Boolean        @default(true) // For soft deletes
  bookings      ClassBooking[]
  invoices      Invoice[]
}

model Trainer {
  id             String   @id @default(cuid())
  name           String
  email          String   @unique
  password       String
  role           String   // 'admin' or 'trainer'
  specialization String
  experience     Int
  schedule       String
  phoneNumber    String?
  bio            String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  isActive       Boolean  @default(true) // For soft deletes
  classes        Class[]
}

model Class {
  id             String         @id @default(cuid())
  name           String
  description    String
  category       String
  date           DateTime
  startTime      String // Consider DateTime if timezones are relevant
  endTime        String // Consider DateTime
  capacity       Int
  availableSlots Int
  trainerId      String
  trainer        Trainer        @relation(fields: [trainerId], references: [id])
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  isActive       Boolean        @default(true) // For soft deletes for classes
  bookings       ClassBooking[]

  @@unique([name, date, startTime])
}

model ClassBooking {
  id          String   @id @default(cuid())
  classId     String
  userId      String
  bookingDate DateTime @default(now())
  class       Class    @relation(fields: [classId], references: [id])
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isActive    Boolean  @default(true) // If bookings can be soft-deleted

  @@unique([classId, userId])
  @@map("booking") // Maps to the 'booking' table in the database
}

model Invoice {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  amount      Float
  dueDate     DateTime
  paid        Boolean  @default(false)
  paymentDate DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isActive    Boolean  @default(true) // For soft deletes
}

model CarouselImage {
  id        String  @id @default(cuid())
  url       String
  position  Int     @unique // Ensures unique positioning
  dataAiHint String? // For AI-powered image suggestions
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isActive  Boolean  @default(true) // For soft deletes
}
