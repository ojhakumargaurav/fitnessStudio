
datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

generator client {
  provider = "nextjs-esm"
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  password      String
  phoneNumber   String?
  role          String    @default("user") // 'user', 'trainer', 'admin' (though admin/trainer are primarily in Trainer model)
  status        String    // "pending", "active" - separate from isActive for soft delete
  isActive      Boolean   @default(true) // For soft delete
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  invoices      Invoice[]
  bookings      ClassBooking[]

  @@index([email])
}

model Trainer {
  id             String    @id @default(cuid())
  name           String
  email          String    @unique
  password       String
  role           String    // "trainer", "admin"
  specialization String
  experience     Int
  schedule       String
  phoneNumber    String?
  bio            String?
  isActive       Boolean   @default(true) // For soft delete
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  classes        Class[]

  @@index([email])
}

model Class {
  id             String    @id @default(cuid())
  name           String
  description    String?
  category       String
  date           DateTime
  startTime      String // Store as HH:MM
  endTime        String // Store as HH:MM
  capacity       Int
  availableSlots Int
  trainerId      String
  trainer        Trainer   @relation(fields: [trainerId], references: [id], onDelete: Cascade)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  bookings       ClassBooking[]

  @@unique([name, date, startTime]) // Ensure a class with the same name, date, and start time is unique
  @@index([trainerId])
  @@index([date])
}

model ClassBooking {
  id          String   @id @default(cuid())
  classId     String
  userId      String
  bookingDate DateTime @default(now())
  class       Class    @relation(fields: [classId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([classId, userId]) // A user can only book a specific class once
  @@index([classId])
  @@index([userId])
  @@map("booking")
}

model Invoice {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  amount      Float
  dueDate     DateTime
  paid        Boolean  @default(false)
  paymentDate DateTime?
  isActive    Boolean  @default(true) // For soft delete
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId])
}

model CarouselImage {
  id         String  @id @default(cuid())
  url        String
  dataAiHint String? // For Unsplash search hint, max two words
  position   Int     @unique // To maintain order
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}
