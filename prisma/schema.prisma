// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  // Ensure a Linux-compatible binary target is included for Netlify
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "sqlite" // For local development. Consider changing for production on Netlify.
  url      = env("DATABASE_URL")
}

model User {
  id          String    @id @default(cuid())
  name        String
  email       String    @unique
  password    String
  phoneNumber String?
  role        String    @default("user") // Should always be 'user' for this model
  status      String    @default("pending") // 'pending' or 'active'
  isActive    Boolean   @default(true) // For soft deletes
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  bookings    ClassBooking[]
  invoices    Invoice[]

  @@index([email])
}

model Trainer {
  id             String   @id @default(cuid())
  name           String
  email          String   @unique
  password       String
  role           String // 'trainer' or 'admin'
  specialization String
  experience     Int
  schedule       String
  phoneNumber    String?
  bio            String?
  isActive       Boolean  @default(true) // For soft deletes
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  classes        Class[]

  @@index([email])
}

model Class {
  id             String   @id @default(cuid())
  name           String
  description    String?
  category       String
  date           DateTime
  startTime      String // Consider DateTime if timezones are important
  endTime        String // Consider DateTime
  capacity       Int
  availableSlots Int
  trainerId      String
  trainer        Trainer  @relation(fields: [trainerId], references: [id])
  isActive       Boolean  @default(true) // For soft deletes
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  bookings       ClassBooking[]

  @@unique([name, date, startTime]) // Ensure class name, date, and start time is unique
  @@index([trainerId])
  @@index([date])
}

model ClassBooking {
  id          String   @id @default(cuid())
  classId     String
  userId      String
  bookingDate DateTime @default(now())
  isActive    Boolean  @default(true) // For soft deletes
  class       Class    @relation(fields: [classId], references: [id])
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([classId, userId])
  @@index([classId])
  @@index([userId])
  @@map("booking") // Maps to the 'booking' table name in the database
}

model Invoice {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  amount      Float
  dueDate     DateTime
  paid        Boolean  @default(false)
  paymentDate DateTime?
  isActive    Boolean  @default(true) // For soft deletes
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId])
}

model CarouselImage {
  id         String   @id @default(cuid())
  url        String
  dataAiHint String?  // For AI-driven image suggestions or alt text
  position   Int      @unique // To maintain order
  isActive   Boolean  @default(true) // For soft deletes
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}
