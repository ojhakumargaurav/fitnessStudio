
datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id          String   @id @default(cuid())
  name        String
  email       String   @unique
  password    String
  phoneNumber String?
  role        String   @default("user") // 'user'
  status      String   // 'pending' or 'active'
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  bookings ClassBooking[]
  invoices Invoice[]
}

model Trainer {
  id             String   @id @default(cuid())
  name           String
  email          String   @unique
  password       String
  role           String   // 'admin' or 'trainer'
  specialization String
  experience     Int
  schedule       String
  phoneNumber    String?
  bio            String?
  isActive       Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  classes Class[]
}

model Class {
  id             String   @id @default(cuid())
  name           String
  description    String
  category       String
  date           DateTime
  startTime      String // e.g., "09:00"
  endTime        String // e.g., "10:00"
  capacity       Int
  availableSlots Int
  trainerId      String
  isActive       Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  trainer  Trainer        @relation(fields: [trainerId], references: [id])
  bookings ClassBooking[]

  @@unique([name, date, startTime]) // Ensure a class with the same name, date, and start time is unique
}

model ClassBooking {
  id          String   @id @default(cuid())
  classId     String
  userId      String
  bookingDate DateTime @default(now())
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  class Class @relation(fields: [classId], references: [id])
  user  User  @relation(fields: [userId], references: [id])

  @@unique([classId, userId])
  @@map("booking") // Maps this model to the "booking" table in the database
}

model Invoice {
  id          String    @id @default(cuid())
  userId      String
  amount      Float
  dueDate     DateTime
  paid        Boolean   @default(false)
  paymentDate DateTime?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id])
}

model CarouselImage {
  id         String  @id @default(cuid())
  url        String
  position   Int     @unique // To maintain order
  dataAiHint String? // For AI-based image search hints
  isActive   Boolean @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}
