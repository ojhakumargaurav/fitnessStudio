
datasource db {
  provider = "postgresql" // Changed from sqlite
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  password      String
  role          String    @default("user") // Should always be "user"
  phoneNumber   String?
  status        String    @default("pending") // "pending", "active"
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  bookings      ClassBooking[]
  invoices      Invoice[]
}

model Trainer {
  id              String    @id @default(cuid())
  name            String
  email           String    @unique
  password        String
  role            String    // "trainer", "admin", "it_admin"
  specialization  String
  experience      Int
  schedule        String
  phoneNumber     String?
  bio             String?
  isActive        Boolean   @default(true)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  classes         Class[]
}

model Class {
  id              String    @id @default(cuid())
  name            String
  description     String
  category        String
  date            DateTime
  startTime       String // Format HH:mm
  endTime         String // Format HH:mm
  capacity        Int
  availableSlots  Int
  trainerId       String
  isActive        Boolean   @default(true)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  trainer         Trainer   @relation(fields: [trainerId], references: [id])
  bookings        ClassBooking[]

  @@unique([name, date, startTime])
}

model ClassBooking {
  id          String   @id @default(cuid())
  classId     String
  userId      String
  bookingDate DateTime @default(now())
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  class       Class    @relation(fields: [classId], references: [id])
  user        User     @relation(fields: [userId], references: [id])

  @@unique([classId, userId])
  @@map("booking")
}

model Invoice {
  id          String   @id @default(cuid())
  userId      String
  amount      Float
  dueDate     DateTime
  paid        Boolean  @default(false)
  paymentDate DateTime?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
}

model CarouselImage {
  id          String   @id @default(cuid())
  url         String
  dataAiHint  String?  // Optional hint for AI image search
  position    Int      @unique // To maintain order
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
