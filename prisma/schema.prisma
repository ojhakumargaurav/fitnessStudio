
datasource db {
  provider     = "postgresql" // or "sqlite" or "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

model User {
  id            String          @id @default(cuid())
  name          String
  email         String          @unique
  password      String
  phoneNumber   String?
  role          String          @default("user") // 'user'
  status        String          @default("pending") // 'pending', 'active'
  isActive      Boolean         @default(true)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  bookings      ClassBooking[]
  invoices      Invoice[]
}

model Trainer {
  id             String   @id @default(cuid())
  name           String
  email          String   @unique
  password       String
  role           String // 'trainer', 'admin', 'it_admin'
  specialization String
  experience     Int
  schedule       String
  phoneNumber    String?
  bio            String?
  imageUrl       String?  // Added trainer image URL
  isActive       Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  classes        Class[]

  @@index([email])
}

model Class {
  id             String         @id @default(cuid())
  name           String
  description    String
  category       String
  date           DateTime
  startTime      String // e.g., "09:00"
  endTime        String // e.g., "10:00"
  capacity       Int
  availableSlots Int
  trainerId      String
  trainer        Trainer        @relation(fields: [trainerId], references: [id])
  isActive       Boolean        @default(true)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  bookings       ClassBooking[]

  @@unique([name, date, startTime]) // Ensure a class with the same name, date, and time is unique
  @@index([trainerId])
}

model ClassBooking {
  id          String   @id @default(cuid())
  classId     String
  class       Class    @relation(fields: [classId], references: [id])
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  bookingDate DateTime @default(now())
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt


  @@unique([classId, userId]) // Prevent double booking
  @@index([classId])
  @@index([userId])
  @@map("booking")
}

model Invoice {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  amount      Float
  dueDate     DateTime
  paid        Boolean  @default(false)
  paymentDate DateTime?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId])
}

model CarouselImage {
  id         String   @id @default(cuid())
  url        String
  dataAiHint String?
  position   Int      @unique // Ensures unique positioning, critical for ordering
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}
