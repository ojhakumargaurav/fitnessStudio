
datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id          String    @id @default(cuid())
  name        String
  email       String    @unique
  password    String
  phoneNumber String?
  role        String    @default("user") // Should always be "user"
  status      UserStatus @default(PENDING) // PENDING, ACTIVE
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  bookings    ClassBooking[]
  invoices    Invoice[]
}

enum UserStatus {
  PENDING
  ACTIVE
}

model Trainer {
  id             String   @id @default(cuid())
  name           String
  email          String   @unique
  password       String
  role           TrainerRole @default(TRAINER) // TRAINER, ADMIN
  specialization String
  experience     Int
  schedule       String
  phoneNumber    String?
  bio            String? // Optional bio
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  classes        Class[]
}

enum TrainerRole {
  TRAINER
  ADMIN
}

model Class {
  id             String   @id @default(cuid())
  name           String
  description    String?
  category       String
  date           DateTime // Stores date and time, but we only care about date part for filtering sometimes
  startTime      String   // e.g., "09:00"
  endTime        String   // e.g., "10:00"
  capacity       Int
  availableSlots Int
  trainerId      String
  trainer        Trainer  @relation(fields: [trainerId], references: [id], onDelete: Cascade)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  bookings       ClassBooking[]

  @@unique([name, date, startTime]) // Ensure a class with the same name, date, and start time is unique
}

model ClassBooking {
  id          String   @id @default(cuid())
  classId     String
  userId      String
  bookingDate DateTime @default(now())
  class       Class    @relation(fields: [classId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([classId, userId]) // A user can book a specific class only once
}

model Invoice {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  amount      Float
  dueDate     DateTime
  paid        Boolean  @default(false)
  paymentDate DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model CarouselImage {
  id        String   @id @default(cuid())
  url       String
  position  Int      @unique // To maintain order
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
