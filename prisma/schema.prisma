
datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  password      String
  phoneNumber   String?
  role          String    @default("user") // Should always be 'user' for this model
  status        String    @default("pending") // 'pending' or 'active'
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  bookings      ClassBooking[]
  invoices      Invoice[]
}

model Trainer {
  id              String    @id @default(cuid())
  name            String
  email           String    @unique
  password        String
  role            String    // 'trainer' or 'admin'
  specialization  String
  experience      Int
  schedule        String
  phoneNumber     String?
  bio             String?   // Optional biography for the trainer
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  classes         Class[]
}

model Class {
  id              String    @id @default(cuid())
  name            String
  description     String?
  category        String
  date            DateTime
  startTime       String // Format "HH:mm"
  endTime         String // Format "HH:mm"
  capacity        Int
  availableSlots  Int
  trainerId       String
  trainer         Trainer   @relation(fields: [trainerId], references: [id], onDelete: Cascade)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  bookings        ClassBooking[]

  @@unique([name, date, startTime]) // Ensure a class with the same name, date, and start time is unique
}

model ClassBooking {
  id           String   @id @default(cuid())
  classId      String
  userId       String
  bookingDate  DateTime @default(now())
  class        Class    @relation(fields: [classId], references: [id], onDelete: Cascade)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@unique([classId, userId]) // A user can only book a specific class once
}

model Invoice {
  id          String    @id @default(cuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  amount      Float
  dueDate     DateTime
  paid        Boolean   @default(false)
  paymentDate DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model CarouselImage {
  id        String   @id @default(cuid())
  url       String
  position  Int      @unique // To maintain order
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  dataAiHint String? // For AI image generation hints
}
